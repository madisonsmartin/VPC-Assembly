import java.io.;

public class VPCrte
{
    static final int MEMSIZ = 100;

    static final int HALT  = 0;
    static final int ADD   = 1;
    static final int SUB   = 2;
    static final int MLT   = 3;
    static final int DIV   = 4;
    static final int ILOAD = 5;
    static final int LOAD  = 6;
    static final int STOR  = 7;
    static final int READ  = 8;
    static final int WRITE = 9;
    static final int BR    = 10;
    static final int BZ    = 11;
    static final int BN    = 12;
    static final int DUMP  = 13;

    static int MEMORY[] = new int[MEMSIZ];
    static int PCREG;
    static int IRREG;
    static int GPREG;

    static boolean debug = false;

    static void readToMemory(String fname) throws IOException
    {
	    FileReader fr = new FileReader(fname);
        BufferedReader br = new BufferedReader(fr);
		
	    int i = 0;
	    String buff;
				
        // for each line of "machine code":
		while((buff = br.readln) != null)
        {
		// here I am going to need to seperate the input again???
            if (debug)
            {
                // display info about code as it is loaded into memory
				//readToMemory: [00] = (0501)
				System.out.println("readToMemory: {" + pad(i,2) + "] = (" + buff + ")");
				}

            // copy machine code instruction into memory
			MEMORY[i++] = Integer.parseInt(buff); 
        }
    }

   


    public static void runProg() throws IOException
    {		
        // initialize PCREG to zero
		PCREG = 0;
		int opcode = -1;
		int operand = -1;
        
		// loop until HALT; PCREG is looping variable
		while(true)
        {
            // fetch current instruction from memory and copy to IRREG
			IRREG = memory[PCREG];

            // extract opcode and operand from IRREG
            opcode = memory[PCREG] / 100;
			operand = memory[PCREG] % 100

            if (debug)
            {
                // display info about code as it is executed
				// runProg:  MEMORY[07] = 0690, opcode = 06, operand = 90, GPREG = 0001 (LOAD)
                System.out.println("runProg: Memory[" + PCREG + "] = " + pad(operator,2) + pad(operand,2)
                    				+ ", opcode = " + pad(operator,2) + ", operand = " + pad(operand,2) 
									+ ", GPREG = " + GPREG + " (" + opar[operator] + ")");
            }

            // handle all of the opcodes with a large if/else if/else if/...
            // or switch statement.
			// HALT, ADD, SUB, MLT, DIV, ILOAD, LOAD, STOR, READ, WRITE, BR, BZ, BN, DUMP
			if(opcode = HALT)
			{
			    System.exit(0);
			}
			if/else(ADD)
			{
			    
			}
			if/else(SUB)
			{
			    
			}
			if/else(MULT)
			{
			    
			}
			if/else(DIV)
			{
			    
			}
			if/else(ILOAD)
			{
			    
			}
			if/else(LOAD)
			{
			    
			}
			if/else(STOR)
			{
			    
			}
			if/else(READ)
			{
			  
			}
			if/else(WRITE)
			{
			    
			}
			if/else(BR)
			{
			    
			}
			if/else(BZ)
			{
			    
			}
			if/else(BN)
			{
			    
			}
			if/else(DUMP)
			{
			    
			}

            // increment PCREG to prepare for next instruction
			PCREG++;
        }
    }

    public static void main(String argv[]) throws IOException
    {
        if (argv.length == 0)
        {
            System.out.println("usage: java VPCrte FILENAME.exe [ debug ]");
            System.exit(0);
        }

        if ((argv.length == 2) && (argv[1].equals("debug"))) debug = true;

        readToMemory(argv[0]);

        if (debug) dumpMemory();

        runProg();
    }
}






